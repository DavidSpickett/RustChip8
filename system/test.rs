#[cfg(test)]
mod test {
    use system::*;
    use std::path::PathBuf;

    #[test]
    fn run_bc_test_rom() {
        let mut rom_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
        rom_path.push("roms/BC_test.ch8");
        let rom_path_str = String::from(rom_path.to_str().expect("bad path!"));
        let mut c8 = make_system(read_rom(&rom_path_str));

        let expected = "\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ---------------------@@@@-----@@@@---@----@---------------------\n\
        ---------------------@---@---@----@--@@---@---------------------\n\
        ---------------------@---@---@----@--@-@--@---------------------\n\
        ---------------------@@@@----@----@--@--@-@---------------------\n\
        ---------------------@---@---@----@--@---@@---------------------\n\
        ---------------------@---@---@----@--@----@---------------------\n\
        ---------------------@---@---@----@--@----@---------------------\n\
        ---------------------@@@@-----@@@@---@----@---------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        ----------------------------------------------------------------\n\
        --@@-------------@@-------------@----@@@---------@--------------\n\
        --@-@------------@-@------------@----@-----------@--------------\n\
        --@-@--@-@-------@-@---@@---@@--@@---@-----@-----@---@@---------\n\
        --@@---@-@-------@@---@-@--@----@----@----@-@---@@--@-@---@@----\n\
        --@-@--@@@-------@-@--@@----@---@----@----@-@--@-@--@@----@-----\n\
        --@-@----@-------@-@--@------@--@----@----@-@--@-@--@-----@-----\n\
        --@@-----@-------@@----@@--@@----@@--@@@---@----@@---@@---@-@---\n";
       
        'running: loop {
            let instr = c8.fetch_and_decode();
            // Jump to self
            if instr.get_opcode() == 0x130e {
                break 'running;
            }
            c8.execute(&instr);
        }
        let got = c8.screen_to_str();
        assert_eq!(expected, got);
    }
}
